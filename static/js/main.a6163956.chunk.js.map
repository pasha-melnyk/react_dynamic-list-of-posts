{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getData","url","a","fetch","response","json","deletePostComment","commentId","method","addPostComment","postId","name","email","body","headers","JSON","stringify","Loader","className","PostsList","selectedUserId","selectPostId","changePostDetailsVisibility","selectedPostId","useState","posts","setPosts","isLoaderVisible","setIsLoaderVisible","loadPosts","userId","postsFromServer","useEffect","map","post","title","type","classNames","id","onClick","NewCommentForm","onAddComment","userName","setUserName","setEmail","setBody","handleChange","event","target","value","Error","onSubmit","preventDefault","placeholder","onChange","PostDetails","postDetails","setPostDetails","postComments","setPostComments","commentsVisibility","setCommentsVisibility","isPostDetailsLoaderVisible","setIsPostDetailsLoaderVisible","isDeleteCommentLoaderVisible","setIsDeleteCommentLoaderVisible","isAddCommentLoaderVisible","setIsAddCommentLoaderVisible","loadPostDetails","postDetailsFromServer","loadPostComments","postCommentsFromServer","deleteComment","addComment","newComment","length","current","postComment","App","setSelectedUserId","setSelectedPostId","postDetailsVisibility","setPostDetailsVisibility","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"sWAAaA,EAAW,oC,SCETC,E,8EAAf,WAAuBC,GAAvB,eAAAC,EAAA,sEACyBC,MAAM,GAAD,OAAIJ,GAAJ,OAAeE,IAD7C,cACQG,EADR,yBAGSA,EAASC,QAHlB,4C,sBAkBO,SAASC,EAAkBC,GAChC,OAAOJ,MAAM,GAAD,OAAIJ,EAAJ,qBAAyBQ,GAAa,CAChDC,OAAQ,WAIL,SAASC,EAAT,GAKU,IAJfC,EAIc,EAJdA,OACAC,EAGc,EAHdA,KACAC,EAEc,EAFdA,MACAC,EACc,EADdA,KAEA,OAAOV,MAAM,GAAD,OAAIJ,EAAJ,cAA0B,CACpCS,OAAQ,OACRM,QAAS,CACP,eAAgB,mCAElBD,KAAME,KAAKC,UAAU,CACnBN,SACAC,OACAC,QACAC,W,iBCtCOI,EAAmB,kBAC9B,qBAAKC,UAAU,SAAf,SACE,qBAAKA,UAAU,uBCQNC,G,MAA6B,SAAC,GAKpC,IAJLC,EAII,EAJJA,eACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,4BACAC,EACI,EADJA,eAEA,EAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8CF,oBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KAEMC,EAAS,uCAAG,4BAAA3B,EAAA,sEFbXF,EAAQ,SAAD,QADa8B,EEekBV,GFdf,kBAAcU,GAAW,KEarC,OACVC,EADU,OAGhBL,EAASK,GACTH,GAAmB,GAJH,iCFdb,IAAsBE,IEcT,OAAH,qDAOfE,qBAAU,WACRJ,GAAmB,GACnBC,MACC,CAACT,IAeJ,OACE,sBAAKF,UAAU,YAAf,UACE,wCAECS,EAAmB,cAAC,EAAD,IAClB,oBAAIT,UAAU,kBAAd,SACGO,EAAMQ,KAAI,SAAAC,GAAI,OACb,qBAAIhB,UAAU,kBAAd,UACE,gCACE,6CAAcgB,EAAKJ,OAAnB,SACCI,EAAKC,SAER,wBACEC,KAAK,SACLlB,UAAWmB,IACT,oBACA,SACA,CAAE,8BAA+BH,EAAKI,KAAOf,IAE/CgB,QAAS,kBAhCU7B,EAgCoBwB,EAAKI,GA/BxDjB,EAAaX,GAERa,GACHD,SAGEC,IAAmBb,IACrBY,IACAD,EAAa,KATe,IAACX,GAyBrB,SASGwB,EAAKI,KAAOf,EAAiB,QAAU,WAdPW,EAAKI,cC/CzCE,G,MAAkC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAChD,EAAgCjB,mBAAS,IAAzC,mBAAOkB,EAAP,KAAiBC,EAAjB,KACA,EAA0BnB,mBAAS,IAAnC,mBAAOZ,EAAP,KAAcgC,EAAd,KACA,EAAwBpB,mBAAS,IAAjC,mBAAOX,EAAP,KAAagC,EAAb,KAEMC,EAAe,SAACC,GAEpB,MAAwBA,EAAMC,OAAtBrC,EAAR,EAAQA,KAAMsC,EAAd,EAAcA,MAEd,OAAQtC,GACN,IAAK,WACHgC,EAAYM,GACZ,MAEF,IAAK,QACHL,EAASK,GACT,MAEF,IAAK,OACHJ,EAAQI,GACR,MAEF,QACE,MAAM,IAAIC,MAAM,wBAStB,OACE,uBAAMhC,UAAU,iBAAiBiC,SANhB,SAACJ,GAClBA,EAAMK,iBACNX,EAAaC,EAAU9B,EAAOC,IAI9B,UACE,qBAAKK,UAAU,aAAf,SACE,uBACEkB,KAAK,OACLzB,KAAK,WACLsC,MAAOP,EACPW,YAAY,YACZnC,UAAU,wBACVoC,SAAUR,MAId,qBAAK5B,UAAU,aAAf,SACE,uBACEkB,KAAK,OACLzB,KAAK,QACLsC,MAAOrC,EACPyC,YAAY,aACZnC,UAAU,wBACVoC,SAAUR,MAId,qBAAK5B,UAAU,aAAf,SACE,0BACEP,KAAK,OACLsC,MAAOpC,EACPwC,YAAY,oBACZnC,UAAU,wBACVoC,SAAUR,MAId,wBACEV,KAAK,SACLlB,UAAU,uCAFZ,gCC1DOqC,G,MAA+B,SAAC,GAAwB,IAAtBhC,EAAqB,EAArBA,eAC7C,EAAsCC,mBAAe,IAArD,mBAAOgC,EAAP,KAAoBC,EAApB,KACA,EAAwCjC,mBAAwB,IAAhE,mBAAOkC,EAAP,KAAqBC,EAArB,KACA,EAAoDnC,oBAAS,GAA7D,mBAAOoC,EAAP,KAA2BC,EAA3B,KACA,EAAoErC,oBAAS,GAA7E,mBAAOsC,EAAP,KAAmCC,EAAnC,KACA,EAAwEvC,oBAAS,GAAjF,mBAAOwC,EAAP,KAAqCC,EAArC,KACA,EAAkEzC,oBAAS,GAA3E,mBAAO0C,EAAP,KAAkCC,EAAlC,KAEMC,EAAe,uCAAG,4BAAAlE,EAAA,sEJVjBF,EAAQ,UAAD,OIWuCuB,IAD7B,OAChB8C,EADgB,OAGtBZ,EAAeY,GACfN,GAA8B,GAJR,2CAAH,qDAOfO,EAAgB,uCAAG,4BAAApE,EAAA,sEJblBF,EAAQ,oBAAD,OIcyCuB,IAD9B,OACjBgD,EADiB,OAGvBZ,EAAgBY,GAChBR,GAA8B,GAC9BE,GAAgC,GAChCE,GAA6B,GANN,2CAAH,qDAStBnC,qBAAU,WACR+B,GAA8B,GAC9BK,IACAE,MACC,CAAC/C,IAEJ,IAAMiD,EAAa,uCAAG,WAAOjE,GAAP,SAAAL,EAAA,yDACpB+D,GAAgC,IAC5B1D,EAFgB,gCAGZD,EAAkBC,GAHN,uBAIZ+D,IAJY,2CAAH,sDAQbG,EAAU,uCAAG,WAAO9D,EAAcC,EAAeC,GAApC,eAAAX,EAAA,6DACjBiE,GAA6B,GACvBO,EAAa,CACjBhE,OAAQa,EACRZ,OACAC,QACAC,QANe,SASXJ,EAAeiE,GATJ,uBAUXJ,IAVW,2CAAH,0DAahB,OACE,sBAAKpD,UAAU,cAAf,UACE,+CAEC4C,EAA8B,cAAC,EAAD,IAC7B,qCACE,yBAAS5C,UAAU,oBAAnB,SACE,4BAAIsC,EAAY3C,SAGlB,0BAASK,UAAU,wBAAnB,YACKwC,EAAaiB,QACd,wBACEvC,KAAK,SACLlB,UAAU,SACVqB,QAAS,kBAAMsB,GAAsB,SAAAe,GAAO,OAAKA,MAHnD,SAKGhB,EAAkB,eACTF,EAAaiB,OADJ,4BAGTjB,EAAaiB,OAHJ,eAQtBf,GACC,oBAAI1C,UAAU,oBAAd,SACGwC,EAAazB,KAAI,SAAA4C,GAAW,OAC3B,qBAAI3D,UAAU,yBAAd,UACE,wBACEkB,KAAK,SACLlB,UAAU,oCACVqB,QAAS,kBAAMiC,EAAcK,EAAYvC,KAH3C,eAOA,4BAAIuC,EAAYhE,SAR0BgE,EAAYvC,YAe/D0B,GAAiC,cAAC,EAAD,IAElC,oCACE,qBAAK9C,UAAU,4BAAf,SACE,cAAC,EAAD,CAAgBuB,aAAcgC,MAE/BP,GAA6B,cAAC,EAAD,eC3C3BY,EAlEO,WACpB,MAA4CtD,mBAAS,GAArD,mBAAOJ,EAAP,KAAuB2D,EAAvB,KACA,EAA4CvD,mBAAS,GAArD,mBAAOD,EAAP,KAAuByD,EAAvB,KACA,EAA0DxD,oBAAS,GAAnE,mBAAOyD,EAAP,KAA8BC,EAA9B,KAgBA,OACE,sBAAKhE,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wBAAOiE,QAAQ,cAAf,gCAGE,yBACEjE,UAAU,qBACVoB,GAAG,cACHW,MAAO7B,EACPkC,SApBW,SAACP,GACpBgC,GAAmBhC,EAAMC,OAAOC,OAChCiC,GAAyB,GACzBF,EAAkB,IAaZ,UAME,wBAAQ/B,MAAM,IAAd,uBACA,wBAAQA,MAAM,IAAd,2BACA,wBAAQA,MAAM,IAAd,0BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,8BACA,wBAAQA,MAAM,IAAd,kCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,IAAd,sCACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,KAAd,mCAKN,uBAAM/B,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEE,eAAgBA,EAChBC,aA7CW,SAACX,GACpBsE,EAAkBtE,IA6CVY,4BApC0B,WAClC4D,GAAyB,SAAAN,GAAO,OAAKA,MAoC7BrD,eAAgBA,MAIpB,qBAAKL,UAAU,eAAf,WACKK,GAAkB0D,GACnB,cAAC,EAAD,CAAa1D,eAAgBA,aC5DzC6D,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a6163956.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nasync function getData(url: string) {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  return response.json();\n}\n\nexport function getUserPosts(userId: number): Promise<Post[]> {\n  return getData(`/posts${userId ? `?userId=${userId}` : ''}`);\n}\n\nexport function getPostDetails(postId: number): Promise<Post> {\n  return getData(`/posts/${postId}`);\n}\n\nexport function getPostComments(postId: number): Promise<PostComment[]> {\n  return getData(`/comments?postId=${postId}`);\n}\n\nexport function deletePostComment(commentId: number) {\n  return fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function addPostComment({\n  postId,\n  name,\n  email,\n  body,\n}: PostComment) {\n  return fetch(`${BASE_URL}/comments/`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedUserId: number;\n  selectPostId: (postId: number) => void;\n  changePostDetailsVisibility: () => void;\n  selectedPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  selectPostId,\n  changePostDetailsVisibility,\n  selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(true);\n\n  const loadPosts = async () => {\n    const postsFromServer = await getUserPosts(selectedUserId);\n\n    setPosts(postsFromServer);\n    setIsLoaderVisible(false);\n  };\n\n  useEffect(() => {\n    setIsLoaderVisible(true);\n    loadPosts();\n  }, [selectedUserId]);\n\n  const handleDetailButtonClick = (postId: number) => {\n    selectPostId(postId);\n\n    if (!selectedPostId) {\n      changePostDetailsVisibility();\n    }\n\n    if (selectedPostId === postId) {\n      changePostDetailsVisibility();\n      selectPostId(0);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {isLoaderVisible ? (<Loader />) : (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className={classNames(\n                  'PostsList__button',\n                  'button',\n                  { 'PostsList__button--selected': post.id === selectedPostId },\n                )}\n                onClick={() => handleDetailButtonClick(post.id)}\n              >\n                {post.id === selectedPostId ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  onAddComment: (name: string, email: string, body: string) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddComment }) => {\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'userName':\n        setUserName(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'body':\n        setBody(value);\n        break;\n\n      default:\n        throw new Error('Invalid input name');\n    }\n  };\n\n  const addComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onAddComment(userName, email, body);\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={addComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"userName\"\n          value={userName}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\nimport {\n  getPostComments,\n  getPostDetails,\n  deletePostComment,\n  addPostComment,\n} from '../../api/posts';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState<Post>({} as Post);\n  const [postComments, setPostComments] = useState<PostComment[]>([]);\n  const [commentsVisibility, setCommentsVisibility] = useState(true);\n  const [isPostDetailsLoaderVisible, setIsPostDetailsLoaderVisible] = useState(true);\n  const [isDeleteCommentLoaderVisible, setIsDeleteCommentLoaderVisible] = useState(true);\n  const [isAddCommentLoaderVisible, setIsAddCommentLoaderVisible] = useState(true);\n\n  const loadPostDetails = async () => {\n    const postDetailsFromServer = await getPostDetails(selectedPostId);\n\n    setPostDetails(postDetailsFromServer);\n    setIsPostDetailsLoaderVisible(false);\n  };\n\n  const loadPostComments = async () => {\n    const postCommentsFromServer = await getPostComments(selectedPostId);\n\n    setPostComments(postCommentsFromServer);\n    setIsPostDetailsLoaderVisible(false);\n    setIsDeleteCommentLoaderVisible(false);\n    setIsAddCommentLoaderVisible(false);\n  };\n\n  useEffect(() => {\n    setIsPostDetailsLoaderVisible(true);\n    loadPostDetails();\n    loadPostComments();\n  }, [selectedPostId]);\n\n  const deleteComment = async (commentId?: number) => {\n    setIsDeleteCommentLoaderVisible(true);\n    if (commentId) {\n      await deletePostComment(commentId);\n      await loadPostComments();\n    }\n  };\n\n  const addComment = async (name: string, email: string, body: string) => {\n    setIsAddCommentLoaderVisible(true);\n    const newComment = {\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    };\n\n    await addPostComment(newComment);\n    await loadPostComments();\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {isPostDetailsLoaderVisible ? (<Loader />) : (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{postDetails.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {!!postComments.length && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setCommentsVisibility(current => !current)}\n              >\n                {commentsVisibility ? (\n                  `Hide ${postComments.length} comments`\n                ) : (\n                  `Show ${postComments.length} comments`\n                )}\n              </button>\n            )}\n\n            {commentsVisibility && (\n              <ul className=\"PostDetails__list\">\n                {postComments.map(postComment => (\n                  <li className=\"PostDetails__list-item\" key={postComment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => deleteComment(postComment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{postComment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          {isDeleteCommentLoaderVisible && (<Loader />)}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm onAddComment={addComment} />\n            </div>\n            {isAddCommentLoaderVisible && <Loader />}\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [postDetailsVisibility, setPostDetailsVisibility] = useState(false);\n\n  const selectPostId = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  const selectUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n    setPostDetailsVisibility(false);\n    setSelectedPostId(0);\n  };\n\n  const changePostDetailsVisibility = () => {\n    setPostDetailsVisibility(current => !current);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select-user\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"select-user\"\n            value={selectedUserId}\n            onChange={selectUserId}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectPostId={selectPostId}\n            changePostDetailsVisibility={changePostDetailsVisibility}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {!!selectedPostId && postDetailsVisibility && (\n            <PostDetails selectedPostId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}